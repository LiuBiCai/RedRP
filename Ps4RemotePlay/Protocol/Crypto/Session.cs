using System;
using System.IO;
using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Asn1.Sec;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math.EC;
using Org.BouncyCastle.Security;
using Ps4RemotePlay.Util;
using Org.BouncyCastle.Math;

namespace Ps4RemotePlay.Protocol.Crypto
{
    public class Session
    {
        private static readonly DerObjectIdentifier ECCurveAlgo = SecObjectIdentifiers.SecP256k1;
        private const string KeyExchangeAlgorithm = "ECDH";

        private readonly byte[] _key;
        private byte[] _nonce;

        private ulong _inputCtr;
        private ulong _outputCtr;

        public static AsymmetricCipherKeyPair GenerateKeyPair()
        {
            var gen = new ECKeyPairGenerator();
            var genParams = new ECKeyGenerationParameters(ECCurveAlgo, new SecureRandom());

            gen.Init(genParams);
            return gen.GenerateKeyPair();
        }

        public static byte[] GetPublicKeyBytesFromKeyPair(AsymmetricCipherKeyPair keyPair)
        {
            return ((ECPublicKeyParameters)keyPair.Public).Q.GetEncoded();
        }

        public static ICipherParameters ConvertPubkeyBytesToCipherParams(byte[] pubKeyBytes)
        {
            X9ECParameters ecCurve = ECNamedCurveTable.GetByOid(ECCurveAlgo);
            ECPoint point = ecCurve.Curve.DecodePoint(pubKeyBytes);
            return new ECPublicKeyParameters(KeyExchangeAlgorithm, point, ECCurveAlgo);
        }

        public static ICipherParameters ConvertPrivatekeyBytesToCipherParams(byte[] privateKeyBytes)
        {
            return new ECPrivateKeyParameters(KeyExchangeAlgorithm, new BigInteger(privateKeyBytes), ECCurveAlgo);
        }

        public static byte[] GenerateSharedSecret(ICipherParameters clientPrivateKey, ICipherParameters foreignPublicKey)
        {
            var agreement = AgreementUtilities.GetBasicAgreement(KeyExchangeAlgorithm);
            agreement.Init(clientPrivateKey);

            var bytes = agreement.CalculateAgreement(foreignPublicKey).ToByteArrayUnsigned();
            return bytes;
        }

        public static byte[] CalculateHash(byte[] data)
        {
            return DigestUtilities.CalculateDigest("SHA256", data);
        }

        public static byte[] CalculateHMAC(byte[] key, byte[] data)
        {
            return MacUtilities.CalculateMac("HMAC-SHA256", new KeyParameter(key), data);
        }

        public Session(byte[] key, byte[] nonce)
        {
            if (key.Length != 16)
                throw new InvalidDataException("key.Length != 16");
            if (nonce.Length != 16)
                throw new InvalidDataException("nonce.Length != 16");
            this._key = key;
            this._nonce = nonce;
            this._inputCtr = 0;
            this._outputCtr = 0;
        }

        public byte[] Encrypt(byte[] data,bool ps5=false)
        {
            byte[] iv = GetIV(_outputCtr,ps5);
            ++_outputCtr;

            return CreateAesCfbCipher(iv, doEncrypt: true).DoFinal(data);
        }

        public byte[] Encrypt(byte[] data, ulong ctr)
        {
            byte[] iv = this.GetIV(ctr);
            return CreateAesCfbCipher(iv, doEncrypt: true).DoFinal(data);
        }

        public byte[] Decrypt(byte[] data)
        {
            byte[] iv = GetIV(_inputCtr);
            ++_inputCtr;

            return CreateAesCfbCipher(iv, doEncrypt: false).DoFinal(data);
        }

        public byte[] Decrypt(byte[] data, ulong ctr)
        {
            byte[] iv = GetIV(ctr);

            return CreateAesCfbCipher(iv, doEncrypt: false).DoFinal(data);
        }
        /*
        public byte[] GetNonceDerivative()
        {
            byte[] deriv = new byte[this._nonce.Length]; // ToDo check nonce length etc
            for (int i = 0; i < this._nonce.Length; i++)
            {
                deriv[i] = (byte)(CryptoService.RegNonceKey[i] ^ (0x200 + this._nonce[i] - i - 0x29) & 0xFF);
            }
            return deriv;
        }
        */
        //2020.1.7
        public byte[] GetNonceDerivative()
        {
            //CHECK nonce 2020.1.8
            //nonce 0x63,0x92,0x94,0xf1,0xdf,0x17,0x20,0xb2,0x02,0x31,0x4a,0x0c,0xd3,0x7c,0xf8,0x1b
            //deriv 0x65,0xa3,0x95,0x35,0x7b,0xd5,0x91,0x24,0xd5,0x46,0x15,0xaa,0xed,0xe6,0xe8,0x7b
            //CHECK ERROR 2020.1.8
            //CHECK PASS
            //_nonce = new byte[] {0x63,0x92,0x94,0xf1,0xdf,0x17,0x20,0xb2,0x2,0x31,0x4a,0x0c,0xd3,0x7c,0xf8,0x1b };

            byte[] keys_1 = {
        0xc8, 0x48, 0xc2, 0xb4, 0x08, 0xeb, 0x88, 0xf7, 0x5f, 0x4a,
        0x09, 0x2d, 0x59, 0x1f, 0x09, 0xcd, 0x1c, 0x18, 0xf4, 0x7a,
        0x28, 0x4a, 0x96, 0x6d, 0xb3, 0x59, 0x71, 0x53, 0x75, 0x7e,
        0x82, 0x50, 0x57, 0xe4, 0x59, 0xb3, 0xf4, 0x49, 0x69, 0x40,
        0xeb, 0x17, 0xc9, 0x9f, 0x17, 0x97, 0x71, 0xae, 0xc9, 0x60,
        0x7f, 0xf8, 0x2e, 0x08, 0x94, 0xe8, 0x43, 0xea, 0xda, 0x6b,
        0xe5, 0x19, 0x59, 0x33, 0x1f, 0x89, 0xae, 0x47, 0x57, 0x7b,
        0x1c, 0x66, 0xfe, 0xff, 0x95, 0xbf, 0x55, 0x6b, 0xd5, 0x93,
        0x27, 0xea, 0xa6, 0x24, 0x67, 0x39, 0x9f, 0xd3, 0x0c, 0xaa,
        0x26, 0x42, 0xe7, 0x66, 0x4d, 0xd8, 0x18, 0x75, 0xfe, 0x44,
        0x03, 0x46, 0xee, 0x3e, 0xf8, 0x3c, 0xb7, 0x85, 0x97, 0x03,
        0x07, 0x06, 0x92, 0xff, 0x59, 0x17, 0x27, 0x0b, 0x21, 0xf7,
        0x05, 0x7f, 0x69, 0x90, 0x0e, 0x38, 0x91, 0xc6, 0x67, 0x23,
        0x48, 0xba, 0x08, 0x8e, 0x57, 0xdd, 0x91, 0xd0, 0x40, 0x47,
        0x1c, 0x5b, 0xbf, 0xc8, 0x06, 0x3f, 0x96, 0xa0, 0xdc, 0x00,
        0xe5, 0x9a, 0xf5, 0x3b, 0x90, 0x80, 0x66, 0xbb, 0x0f, 0x93,
        0x30, 0x07, 0x2b, 0x56, 0x45, 0xa0, 0x9a, 0xb1, 0xb0, 0x72,
        0x0c, 0xe4, 0xdd, 0x70, 0xdd, 0x7c, 0x5a, 0xbf, 0xd4, 0xe8,
        0x0d, 0xca, 0x37, 0xe5, 0x0e, 0xfd, 0x12, 0xee, 0x79, 0x9a,
        0x5e, 0xa7, 0x1e, 0x31, 0xaf, 0x1f, 0x46, 0x52, 0xca, 0xf3,
        0x42, 0x00, 0x3d, 0xf2, 0x89, 0x7c, 0x1c, 0x77, 0x60, 0xb7,
        0x4a, 0x80, 0x76, 0x47, 0x4b, 0x3f, 0xb6, 0x91, 0x2f, 0x9c,
        0xc2, 0xf1, 0xad, 0x44, 0x29, 0xcb, 0x32, 0x8c, 0x0a, 0x8d,
        0x05, 0x75, 0x46, 0xa1, 0xf8, 0xda, 0x1a, 0xa7, 0x20, 0xde,
        0x32, 0x59, 0xfe, 0x70, 0xb5, 0x87, 0xf3, 0x92, 0xfd, 0xb4,
        0xdf, 0xf4, 0xa6, 0xe3, 0x7d, 0x98, 0x3b, 0xe1, 0xba, 0x18,
        0xdb, 0x61, 0xd1, 0xc2, 0xa6, 0xee, 0x08, 0x25, 0xfa, 0x86,
        0x8a, 0x7b, 0xfe, 0xbc, 0x02, 0xbd, 0x22, 0x5f, 0x25, 0x30,
        0x51, 0x5d, 0x28, 0x36, 0x5a, 0x29, 0x8e, 0x52, 0xeb, 0x49,
        0x14, 0x28, 0x7f, 0x0a, 0xc4, 0x69, 0x25, 0x85, 0x6b, 0xec,
        0x33, 0x33, 0x57, 0xab, 0x50, 0x13, 0xcf, 0xe7, 0x73, 0x78,
        0x23, 0x06, 0x4d, 0x1f, 0xbb, 0x38, 0x11, 0xb1, 0x6e, 0x6c,
        0x6f, 0xcd, 0x4b, 0x0e, 0x42, 0x85, 0x80, 0xbb, 0xa8, 0x39,
        0x68, 0xc9, 0x5b, 0xbb, 0x46, 0x58, 0x86, 0x88, 0x57, 0x88,
        0x5e, 0xea, 0x7c, 0x37, 0xdf, 0xfd, 0x02, 0x39, 0x45, 0x89,
        0x2e, 0xf2, 0xe4, 0xf0, 0x08, 0xc0, 0xb6, 0xeb, 0x9c, 0x6e,
        0x7a, 0x81, 0xa3, 0x26, 0x46, 0xfe, 0xe1, 0x70, 0x3c, 0x3e,
        0x11, 0x7a, 0x32, 0xce, 0x45, 0x02, 0x7d, 0x32, 0xcd, 0x08,
        0x07, 0x06, 0xa3, 0xa8, 0xf7, 0x34, 0xfe, 0xee, 0x06, 0xb0,
        0x14, 0xd6, 0x6b, 0x2d, 0x2e, 0x01, 0xaf, 0x77, 0x11, 0xec,
        0x1f, 0x31, 0x38, 0x17, 0x9c, 0xd0, 0xe0, 0xc5, 0x4d, 0xa4,
        0xd6, 0xad, 0xb9, 0xe6, 0xe1, 0xe3, 0xe2, 0x9e, 0x44, 0x91,
        0x9a, 0x5e, 0x26, 0xca, 0xcc, 0xda, 0x4d, 0xd7, 0x78, 0x6a,
        0x75, 0xa6, 0x19, 0xad, 0xcc, 0x62, 0xc7, 0xb6, 0x0d, 0x14,
        0xb1, 0xbe, 0xeb, 0xcb, 0x10, 0xcf, 0xa9, 0xee, 0xe2, 0x42,
        0x08, 0x35, 0x8a, 0x5c, 0xbc, 0xf1, 0x49, 0xfe, 0x64, 0x78,
        0x03, 0x49, 0x0c, 0x85, 0xf0, 0xe4, 0x77, 0x26, 0xd2, 0x5e,
        0xf5, 0xc1, 0x3b, 0x3d, 0x2d, 0xcc, 0xcf, 0x2a, 0xac, 0xed,
        0x88, 0x52, 0x74, 0x6d, 0xbf, 0xb2, 0xb9, 0xf7, 0x58, 0x51,
        0x1c, 0x50, 0xf6, 0x3d, 0xf2, 0xc4, 0x47, 0x0a, 0x21, 0x30,
        0x47, 0x81, 0x2d, 0xe4, 0x75, 0x0d, 0x8f, 0x2d, 0x22, 0xb0,
        0x63, 0x27
            };
            int key_1_off = 8;
            byte[] deriv = new byte[this._nonce.Length]; // ToDo check nonce length etc
            for (int i = 0; i < this._nonce.Length; i++)
            {
                byte k = keys_1[i * 0x20 + key_1_off];
                byte middle1 = (byte)(this._nonce[i] ^ k);
                byte middle2 = (byte)(middle1 + 0x29);
                deriv[i] =(byte)(middle2+ i);

            }
            return deriv;
        }
        /***********************/
        /*** private methods ***/
        /***********************/

        private byte[] GetIV(ulong counter,bool ps5=false)
        {
            //CHECK 2021.1.9
            //_nonce { 0x3e, 0x7e, 0x7a, 0x82, 0x59, 0x73, 0xad, 0xab, 0x2f, 0x69, 0x43, 0x46, 0xbd, 0x44, 0xda, 0xb5 }
            // { 0xac, 0x48, 0x99, 0x77, 0xf9, 0x2a, 0xc5, 0x5b, 0xb9, 0x09, 0x3c, 0x33, 0xb6, 0x11, 0x3c, 0x46 }
            //_nonce = new byte[] { 0x3e, 0x7e, 0x7a, 0x82, 0x59, 0x73, 0xad, 0xab, 0x2f, 0x69, 0x43, 0x46, 0xbd, 0x44, 0xda, 0xb5 };
            //CHECK PASS 2021.1.10
            byte[] counterBuffer = ByteUtil.ULongToByteArray(counter);
            
            byte[] hmacInput = ByteUtil.ConcatenateArrays(this._nonce, counterBuffer);

            byte[] hash = CalculateHMAC(CryptoService.HmacKeyPS4, hmacInput);
            if(ps5)
            {
                hash= CalculateHMAC(CryptoService.HmacKeyPS5, hmacInput);
            }

            // Only take 16 bytes of calculated HMAC
            Array.Resize(ref hash, 16);
            return hash;
        }

        public IBufferedCipher CreateAesCfbCipher(byte[] iv, bool doEncrypt)
        {
            IBufferedCipher cipher = CipherUtilities.GetCipher("AES/CFB/NoPadding");

            var keyParams = ParameterUtilities.CreateKeyParameter("AES", _key);
            var paramsWithIv = new ParametersWithIV(keyParams, iv);

            cipher.Init(doEncrypt, paramsWithIv);
            return cipher;
        }
    }
}
